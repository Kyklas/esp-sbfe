# ESP32 Secure Boot & Flash Encryption target
#
# extends the ESP IDF to handle flashing and reflashing devices with secure boot
# and flash encryption enabled dynamically
#



#
# JSON file containing the device info
#

SBFE_DEV_EFUSE_JSON=$(BUILD_DIR_BASE)/esp32_dev_efuse.json

#.PHONY: $(SBFE_DEV_EFUSE_JSON)

$(SBFE_DEV_EFUSE_JSON):
	$(ESPEFUSEPY) --port $(ESPPORT) --baud $(ESPBAUD) --before default_reset values -j $@ BLK1 BLK2 FLASH_CRYPT_CNT ABS_DONE_0 MAC CODING_SCHEME

#
# jq is used to parse the JSON file
#
.PHONY: tool_check_jq
tool_check_jq:
	$(if $(shell which jq),,$(error JQ tool is needed : sudo apt install jq ))


#
# Variables
#

SBFE_CMPT_DIR:=$(COMPONENT_PATH)
SBFE_DEV_KEYS_DIR=$(SBFE_CMPT_DIR)/esp-sbfe-keys
SBFE_DEV_KEYS_EXT_DIR?=

#
# Processing at target execution the result of the efuse
#
sbfe-dev-info: $(SBFE_DEV_EFUSE_JSON) tool_check_jq
	$(eval SBFE_DEV_MAC=$(shell jq -r '.MAC.value_hex' $< ))
	$(eval SBFE_DEV_MAC_DIR=$(subst :,-,$(SBFE_DEV_MAC)))
	$(eval SBFE_DEV_CODINGSCHEME=$(shell jq -r '.CODING_SCHEME.value' $<))
	$(eval SBFE_DEV_BLK1_WRITEABLE=$(shell jq -r '.BLK1.writable' $<))
	$(eval SBFE_DEV_BLK2_WRITEABLE=$(shell jq -r '.BLK2.writable' $<))
	$(eval SBFE_DEV_ENCRYPTION_SET=$(shell jq -r '.FLASH_CRYPT_CNT.value' $<))
	$(eval SBFE_DEV_SECUREBOOT_SET=$(shell jq -r '.ABS_DONE_0.value' $<))

	$(eval SBFE_DEV_KEYS_DIR_MAC_LOCAL=$(wildcard $(SBFE_DEV_KEYS_DIR)/$(SBFE_DEV_MAC_DIR)))
	$(eval SBFE_DEV_KEYS_DIR_MAC_EXT=$(wildcard $(SBFE_DEV_KEYS_EXT_DIR)/$(SBFE_DEV_MAC_DIR)))
	
	$(eval SBFE_DEV_KEYS_DIR_FINAL=$(if $(SBFE_DEV_KEYS_DIR_MAC_LOCAL),\
		$(SBFE_DEV_KEYS_DIR_MAC_LOCAL),$(SBFE_DEV_KEYS_DIR_MAC_EXT)))
	
	$(info Secure Boot & Flash Encryption Device Info )
	$(info Device Mac $(SBFE_DEV_MAC), Device Coding $(SBFE_DEV_CODINGSCHEME))
	$(info Device Hardware Keys Writable : $(SBFE_DEV_BLK1_WRITEABLE) $(SBFE_DEV_BLK2_WRITEABLE))
	$(info Device Secure Boot ($(SBFE_DEV_SECUREBOOT_SET)), Flash Encryption ($(SBFE_DEV_ENCRYPTION_SET)))

	$(info Device Hardware Keys @ "$(SBFE_DEV_KEYS_DIR_FINAL)")


#
# SBFE check compatibility
#

.PHONY: sbfe-dev-check

.ONESHELL:
SHELL=/bin/bash
sbfe-dev-check: sbfe-dev-info
	if [[ $(SBFE_DEV_SECUREBOOT_SET) -eq 1 ]] && [[ -z "$(SBFE_DEV_KEYS_DIR_FINAL)" ]]; then
		echo "Device has Secure Boot enable but not keys are available"
		exit 1
	fi
	
	# Does not support flash re-encryption, re-encryption does not work with secure boot anyway	
	if [[ $(SBFE_DEV_ENCRYPTION_SET) -gt 0 ]] && [[ -z "$(SBFE_DEV_KEYS_DIR_FINAL)" ]]; then
		echo "Device has Flash Encryption enable but not keys are available"
		exit 1
	fi


#
# Calling SBFE targets
#

SBFE_CMD_MAKE= + \
	PROJECT_PATH= \
	COMPONENT_DIRS= \
	SDKCONFIG=$(SDKCONFIG) \
	$(MAKE) -C $(SBFE_CMPT_DIR)/esp-sbfe-subproject/ \
	V=$(V) \
	BUILD_DIR_BASE=$(BUILD_DIR_BASE)/esp-sbfe \
	TEST_COMPONENTS= \
	TESTS_ALL= \
	EXCLUDE_COMPONENTS=

SBFE_TARGETS=sbfe-flash-app

.PHONY: $(SBFE_TARGETS)

$(SBFE_TARGETS): sbfe-dev-check
	$(SBFE_CMD_MAKE) $@






