# ESP32 Secure Boot & Flash Encryption Info
#
#

#
# JSON file containing the device info
#

SBFE_DEV_EFUSE_JSON=$(BUILD_DIR_BASE)/esp_sbfe_dev_efuse.json

ifneq ($(SBFE_DEV_SKIP_READ_DEV),1)
.PHONY: $(SBFE_DEV_EFUSE_JSON)
endif

$(SBFE_DEV_EFUSE_JSON):
	$(ESPEFUSEPY) --port $(ESPPORT) --baud $(ESPBAUD) --before default_reset values -j $@ BLK1 BLK2 FLASH_CRYPT_CNT ABS_DONE_0 MAC CODING_SCHEME

#
# jq is used to parse the JSON file
#
.PHONY: tool_check_jq
tool_check_jq:
	$(if $(shell which jq),,$(error JQ tool is needed : sudo apt install jq ))


#
# Variables
#

SBFE_CMPT_DIR:=$(abspath $(COMPONENT_PATH)/..)

SBFE_DEV_KEYS_EXT_DIR?=
SBFE_DEV_KEYS_DIR?=
SBFE_DEV_KEYS_DIR+=$(SBFE_CMPT_DIR)/esp-sbfe-keys $(SBFE_DEV_KEYS_EXT_DIR)

SBFE_DEV_KEYS_DIR_FINAL=

#
# Processing at target execution the result of the efuse
#
sbfe-info: $(SBFE_DEV_EFUSE_JSON) tool_check_jq
	$(eval SBFE_DEV_MAC=$(shell jq -r '.MAC.value_hex' $< ))
	$(eval SBFE_DEV_MAC_DIR=$(subst :,-,$(SBFE_DEV_MAC)))
	$(eval SBFE_DEV_CODINGSCHEME=$(shell jq -r '.CODING_SCHEME.value' $<))
	$(eval SBFE_DEV_BLK1_WRITEABLE=$(shell jq -r '.BLK1.writable' $<))
	$(eval SBFE_DEV_BLK2_WRITEABLE=$(shell jq -r '.BLK2.writable' $<))
	$(eval SBFE_DEV_BLK1_READABLE=$(shell jq -r '.BLK1.readable' $<))
	$(eval SBFE_DEV_BLK2_READABLE=$(shell jq -r '.BLK2.readable' $<))
	$(eval SBFE_DEV_BLK1=$(shell jq -r '.BLK1.value' $<))
	$(eval SBFE_DEV_BLK2=$(shell jq -r '.BLK2.value' $<))
	$(eval SBFE_DEV_ENCRYPTION_SET=$(shell jq -r '.FLASH_CRYPT_CNT.value' $<))
	$(eval SBFE_DEV_SECUREBOOT_SET=$(shell jq -r '.ABS_DONE_0.value' $<))
	
	$(info Secure Boot & Flash Encryption Device Info )
	$(info - Device Mac $(SBFE_DEV_MAC), Device Coding $(SBFE_DEV_CODINGSCHEME))
	$(info - Device Hardware Keys Writable : $(SBFE_DEV_BLK1_WRITEABLE) $(SBFE_DEV_BLK2_WRITEABLE))
	$(info - Device Secure Boot ($(SBFE_DEV_SECUREBOOT_SET)), Flash Encryption ($(SBFE_DEV_ENCRYPTION_SET)))
	
	$(foreach KEY_DIR,$(SBFE_DEV_KEYS_DIR), \
		$(if $(SBFE_DEV_KEYS_DIR_FINAL),, \
			$(info Searching Hardware Key in $(KEY_DIR)/$(SBFE_DEV_MAC_DIR)) \
			$(eval SBFE_DEV_KEYS_DIR_FINAL=$(wildcard $(KEY_DIR)/$(SBFE_DEV_MAC_DIR)))))
	
	$(info - Device Hardware Keys @ "$(SBFE_DEV_KEYS_DIR_FINAL)")


SBFE_VAR_SB_KEY_FILENAME=secure_boot.key
SBFE_VAR_FE_KEY_FILENAME=flash_encryption.key

export SBFE_VAR_SB_KEY_FILENAME SBFE_VAR_FE_KEY_FILENAME




