# ESP32 Secure Boot & Flash Encryption Burn Keys
#
#

# if target is explicitly called then
# $1 target
# $2 output
define fn_explicit_target
$(if $(filter $1,$(MAKECMDGOALS)),$2)
endef

define fn_keysize_from_codingscheme
$(if $(filter $(SBFE_VAR_CODINGSCHEME),0),32, \
$(if $(filter $(SBFE_VAR_CODINGSCHEME),1),24, \
$(if $(filter $(SBFE_VAR_CODINGSCHEME),2),16),
$(error value of coding scheme unknown)))
endef

SBFE_VAR_BLK2_BURNABLE?=
SBFE_VAR_BLK1_BURNABLE?=

ifneq ('$(SBFE_VAR_BLK1_BURNABLE).$(SBFE_VAR_BLK2_BURNABLE)','.')

SBFE_BURN_FORCE?=

# Global target
sbfe-burn: $(call fn_explicit_target,sbfe-burn,sbfe-burn-commit)

sbfe-burn-commit:
	$(SBFE_KEY_GIT_CMD) commit -m "Dev Key : Adding device $(notdir $(SBFE_VAR_BURN_KEY_DIR)) keys"

SBFE_ESPEFUSEPY=$(ESPEFUSEPY) --port $(ESPPORT) --baud $(ESPBAUD) --before no_reset

SBFE_KEY_GIT_CMD=git -C $(dir $(SBFE_VAR_BURN_KEY_DIR))

sbfe-key-check: 
	$(SBFE_KEY_GIT_CMD) config --get user.name || (echo "Git config missing user.name"; exit 1 ) 
	$(SBFE_KEY_GIT_CMD) config --get user.email || (echo "Git config missing user.email"; exit 1 ) 

$(SBFE_VAR_BURN_KEY_DIR): sbfe-key-check
	$(SBFE_FLH_DRYRUN) mkdir $@

$(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_FE_KEY_FILENAME) $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_SB_KEY_FILENAME) : sbfe-key-check | $(SBFE_VAR_BURN_KEY_DIR)
	$(eval SBFE_KEY_SIZE=$(call fn_keysize_from_codingscheme))
	echo "Generating $(SBFE_STYLE_TARGET)$@$(SBFE_STYLE_CLEAR) with $(SBFE_KEY_SIZE) bytes"
	$(SBFE_FLH_DRYRUN) openssl rand -out $@ $(SBFE_KEY_SIZE)
	$(SBFE_FLH_DRYRUN) hexdump -C $@


ifeq ($(SBFE_VAR_BLK2_BURNABLE),1)

# Burn Secure Boot Key, aka BLOCK2 BLK2
sbfe-burn-sb-burn: $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_SB_KEY_FILENAME)
	$(SBFE_FLH_DRYRUN) $(SBFE_ESPEFUSEPY) $(if $(filter $(SBFE_BURN_FORCE),yes),--do-not-confirm) \
		burn_key secure_boot $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_SB_KEY_FILENAME)

# All done, add key
sbfe-burn-sb-add: sbfe-burn-sb-burn
	$(SBFE_KEY_GIT_CMD) add $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_SB_KEY_FILENAME)
	
sbfe-burn-commit: $(call fn_explicit_target,sbfe-burn sbfe-burn-sb,sbfe-burn-sb-add)

sbfe-burn-sb: $(call fn_explicit_target,sbfe-burn-sb,sbfe-burn-commit)

endif # If device has block 2 burnable

ifeq ($(SBFE_VAR_BLK1_BURNABLE),1)


# Burn Flash Encryption Key, aka BLOCK1 BLK1
sbfe-burn-fe-burn: $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_FE_KEY_FILENAME)
	$(SBFE_FLH_DRYRUN) $(SBFE_ESPEFUSEPY) $(if $(filter $(SBFE_BURN_FORCE),yes),--do-not-confirm) \
		burn_key flash_encryption $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_FE_KEY_FILENAME)

# All done, add key
sbfe-burn-fe-add: sbfe-burn-fe-burn
	$(SBFE_KEY_GIT_CMD) add $(SBFE_VAR_BURN_KEY_DIR)/$(SBFE_VAR_FE_KEY_FILENAME)
	
sbfe-burn-commit: $(call fn_explicit_target,sbfe-burn sbfe-burn-fe,sbfe-burn-fe-add)

sbfe-burn-fe: $(call fn_explicit_target,sbfe-burn-fe,sbfe-burn-commit)
endif # If device has block 1 burnable

else # Some key should be burnable

sbfe-burn sbfe-burn-fe sbfe-burn-sb:
	$(call sbfe_notify,FAIL : No keys are burnable)
	exit 1

endif
